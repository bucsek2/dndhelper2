{"version":3,"sources":["component/character/Character.tsx","util/Dice.ts","component/survivalHelper/SurvivalHelper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Character","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateForage","bind","assertThisInitialized","updateSurvival","updateWisdom","inherits","createClass","key","value","survival","updateCharacter","id","forage","name","wisdom","character","onChange","_this2","console","log","push","react_default","a","createElement","spinner","e","formatInput","decimalSeparator","thousandSeparator","min","max","panel","header","className","primereact_checkbox","checked","primereact_button","label","onClick","onRemove","React","Component","Dice","getRndInteger","Math","floor","random","SurvivalHelper","state","forageDC","characters","newCharacterName","currentFood","daysPassed","startingFood","addCharacter","updateCharacterName","updateStartingFood","andvanceDay","removeCharacter","updated","count","length","setState","event","target","found","find","c","index","indexOf","forUpdate","splice","foodConsumption","foragedFood","map","foraged","d20","d6","reduce","b","_this3","jsxCharacters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","Character_Character","err","return","advanceAvailable","inputtext","keyfilter","disabled","App","SurvivalHelper_SurvivalHelper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6966cbd4.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\nimport { Checkbox } from 'primereact/checkbox';\nimport { Spinner } from 'primereact/spinner';\nimport { Button } from 'primereact/button';\nimport \"./Character.css\";\n\nexport interface CharacterProps extends CharacterModel {\n    onChange: (state: CharacterModel)=>void\n    onRemove: (id: string) => void\n}\n\nexport interface CharacterModel {\n    id: string;\n    name: string;\n    survival: number;\n    wisdom: number;\n    forage: boolean;\n}\n\nexport class Character extends React.Component<CharacterProps, {}> {\n    constructor(props: CharacterProps) {\n        super(props);\n\n        this.updateForage = this.updateForage.bind(this);\n        this.updateSurvival = this.updateSurvival.bind(this);\n        this.updateWisdom = this.updateWisdom.bind(this);\n    }\n\n    private updateSurvival(survival: number){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: this.props.forage,\n            name: this.props.name,\n            survival: survival,\n            wisdom: this.props.wisdom\n        });\n    }\n\n    private updateWisdom(wisdom: number){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: this.props.forage,\n            name: this.props.name,\n            survival: this.props.survival,\n            wisdom: wisdom\n        });\n    }\n\n    private updateForage(forage: boolean){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: forage,\n            name: this.props.name,\n            survival: this.props.survival,\n            wisdom: this.props.wisdom\n        });\n    }\n\n    private updateCharacter(character: CharacterModel){\n        this.props.onChange(character);\n    }\n\n    render() {\n        console.log(\"render \"+this.props.name);\n        \n        let forage: JSX.Element[] = []\n\n        forage.push(<span>Survival</span>)\n        forage.push(<Spinner value={this.props.survival} onChange={e=> this.updateSurvival(e.value)} formatInput={true} decimalSeparator={','} thousandSeparator={' '} min={-30} max={30}/>)\n        forage.push(<span>Wisdom</span>)\n        forage.push(<Spinner value={this.props.wisdom} onChange={e=> this.updateWisdom(e.value)} formatInput={true} decimalSeparator={','} thousandSeparator={' '} min={-30} max={30}/>)\n\n        return (\n            <Panel header={this.props.name} className=\"character\">\n                <div className=\"forage\">\n                    <span className=\"forage-label\">Forage</span>\n                    <Checkbox className=\"forage-box\" onChange={e=> this.updateForage(e.checked)} checked={this.props.forage}/>\n                </div>\n                <Button className=\"remove-button\" label=\"X\" onClick={e=> this.props.onRemove(this.props.id)}/>\n                {this.props.forage &&\n                    forage\n                }           \n            </Panel>\n        );\n    }\n}\n","export class Dice {\n    static d100(): number {\n        return Dice.getRndInteger(1, 100);\n    }\n\n    static d20(): number {\n        return Dice.getRndInteger(1, 20);\n    }\n\n    static d12(): number {\n        return Dice.getRndInteger(1, 12);\n    }\n\n    static d10(): number {\n        return Dice.getRndInteger(1, 10);\n    }\n\n    static d8(): number {\n        return Dice.getRndInteger(1, 8);\n    }\n\n    static d6(): number {\n        return Dice.getRndInteger(1, 6);\n    }\n\n    static d4(): number {\n        return Dice.getRndInteger(1, 4);\n    }\n\n    static d2(): number {\n        return Dice.getRndInteger(1, 2);\n    }\n\n    private static getRndInteger(min: number, max: number) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n}\n","import React from 'react';\nimport { CharacterModel, Character } from '../character/Character';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { Spinner } from 'primereact/spinner';\nimport { Dice } from '../../util/Dice';\nimport './SurvivalHelper.scss';\n\nexport interface SurvivalHelperState {\n    characters: CharacterModel[];\n    newCharacterName: string;\n    forageDC: number;\n    startingFood: number;\n    currentFood: number;\n    daysPassed: number;\n}\n\nexport class SurvivalHelper extends React.Component<{}, SurvivalHelperState> {\n    constructor(props: any) {\n        super(props);\n    \n        this.state = {\n            forageDC: 10,\n            characters: [],\n            newCharacterName: \"\",\n            currentFood: 0,\n            daysPassed: 0,\n            startingFood: 0\n        }\n    \n        this.addCharacter = this.addCharacter.bind(this);\n        this.updateCharacterName = this.updateCharacterName.bind(this);\n        this.updateCharacter = this.updateCharacter.bind(this);\n        this.updateStartingFood = this.updateStartingFood.bind(this);\n        this.andvanceDay = this.andvanceDay.bind(this);\n        this.removeCharacter = this.removeCharacter.bind(this);\n      }\n    \n      private addCharacter() {\n        let updated = this.state.characters;\n        let count = this.state.characters.length;\n    \n        let name;\n        if(this.state.newCharacterName) {\n          name = this.state.newCharacterName;\n        }else {\n          name = \"NPC \" + count;\n        }\n    \n        updated.push({\n          id: name,\n          name: name,\n          survival: 0,\n          wisdom: 0,\n          forage: true\n        });\n    \n        this.setState({\n          characters: updated,\n          newCharacterName: \"\"\n        });\n      }\n    \n      private updateCharacterName(event: React.FormEvent<HTMLInputElement>) {\n        let target = event.target as HTMLInputElement;\n        \n        this.setState({\n          newCharacterName: target.value\n        });\n      }\n    \n      private updateCharacter(character: CharacterModel){\n        let found = this.state.characters.find(c => {return c.id === character.id});\n    \n        if(!found){\n          return;\n        }\n    \n        let index = this.state.characters.indexOf(found);\n        let forUpdate = this.state.characters;\n        forUpdate[index] = character;\n        this.setState({\n          characters: forUpdate\n        });\n      }\n\n      private removeCharacter(id: string): void {\n        let found = this.state.characters.find(c => {return c.id === id});\n        if(!found){\n          return;\n        }\n        let index = this.state.characters.indexOf(found);\n\n        let forUpdate = this.state.characters;\n        forUpdate.splice(index, 1);\n        this.setState({\n            characters: forUpdate\n        });\n      }\n    \n      private updateStartingFood(event: React.FormEvent<HTMLInputElement>){\n        let target = event.target as HTMLInputElement;\n        \n        this.setState({\n            startingFood: +target.value,\n            currentFood: +target.value,\n            daysPassed: 0\n        });\n      }\n\n      private andvanceDay(){\n        let foodConsumption = this.state.characters.length;\n\n        let foragedFood = this.state.characters.map(c=> {\n            if(c.forage === false){\n                return 0;\n            }\n\n            let foraged = 0;\n            if(this.state.forageDC < (Dice.d20() + c.survival)){\n                foraged = Dice.d6() + c.wisdom;\n            }\n            return foraged;\n        }).reduce( (a, b) => a + b );\n\n        this.setState( state => ({\n            currentFood: state.currentFood - foodConsumption + foragedFood,\n            daysPassed: state.daysPassed + 1\n        }));\n      }\n\n      render() {\n        let jsxCharacters: JSX.Element[] = [];\n    \n        for(let character of this.state.characters){\n          jsxCharacters.push(<Character key={character.id} onChange={this.updateCharacter} name={character.name} wisdom={character.wisdom} survival={character.survival} forage={character.forage} id={character.id} onRemove={this.removeCharacter}/>);\n        }\n\n        let advanceAvailable = jsxCharacters.length < 1;\n    \n        return (\n          <div className=\"survival-helper\">\n              <div className=\"header\">\n                <div className=\"forage\">\n                  <span className=\"label\">Forage DC</span>\n                  <Spinner formatInput={true} decimalSeparator={\",\"} thousandSeparator={\" \"} value={this.state.forageDC} onChange={e=> this.setState({forageDC: e.value})} min={8} max={30}/>\n                </div>\n                <div className=\"starting-food\">\n                  <span className=\"label\">Starting Food</span>\n                  <InputText value={this.state.startingFood} keyfilter={'int'} onChange={this.updateStartingFood}/>\n                </div>\n                <span className=\"days-passed\">Days Passed: {this.state.daysPassed}</span>\n                <span className=\"current-food\">Current Food: {this.state.currentFood}</span>\n                <Button className=\"advance-day\" label={\"Advance Day!\"} onClick={this.andvanceDay} disabled={advanceAvailable}/>\n              </div>\n            {jsxCharacters}\n            <div className=\"footer\">\n              <div className=\"character-name\">\n                <span className=\"label\">Character name</span>\n                <InputText className=\"input\" value={this.state.newCharacterName} onChange={this.updateCharacterName} />\n              </div>\n              <Button className=\"new-character\" label=\"Add new Character!\" onClick={this.addCharacter}/>\n            </div>\n          </div>\n        );\n      }\n}","import React from 'react';\nimport { SurvivalHelper } from './component/survivalHelper/SurvivalHelper';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SurvivalHelper/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}