{"version":3,"sources":["component/character/Character.tsx","util/Dice.ts","util/StateHandler.ts","component/survivalHelper/SurvivalHelper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Character","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateForage","bind","assertThisInitialized","updateSurvival","updateWisdom","inherits","createClass","key","value","survival","updateCharacter","id","forage","name","wisdom","character","onChange","_this2","react_default","a","createElement","className","spinner","e","formatInput","decimalSeparator","thousandSeparator","min","max","panel","header","primereact_button","label","onClick","onRemove","primereact_checkbox","checked","React","Component","Dice","getRndInteger","Math","floor","random","StateHandler","state","jsonString","JSON","stringify","Cookies","expires","saveState","getState","parse","SurvivalHelper","oldState","getSurvivalState","forageDC","characters","newCharacterName","currentFood","daysPassed","startingFood","addCharacter","updateCharacterName","updateStartingFood","andvanceDay","removeCharacter","updated","count","length","push","uuidv1","setState","saveSurvivalState","event","_this3","target","_this4","found","find","c","index","indexOf","forUpdate","_this5","splice","_this6","_this7","foodConsumption","foragedFood","map","foraged","d20","d6","reduce","b","_this8","jsxCharacters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","Character_Character","err","return","advanceAvailable","inputtext","keyfilter","disabled","App","SurvivalHelper_SurvivalHelper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAoBaA,SAAb,SAAAC,GACI,SAAAD,EAAYE,GAAuB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC/BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAEDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKU,eAAiBV,EAAKU,eAAeF,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKW,aAAeX,EAAKW,aAAaH,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IALWA,EADvC,OAAAC,OAAAW,EAAA,EAAAX,CAAAJ,EAAAC,GAAAG,OAAAY,EAAA,EAAAZ,CAAAJ,EAAA,EAAAiB,IAAA,iBAAAC,MAAA,SAS2BC,GACnBb,KAAKc,gBAAgB,CACjBC,GAAIf,KAAKJ,MAAMmB,GACfC,OAAQhB,KAAKJ,MAAMoB,OACnBC,KAAMjB,KAAKJ,MAAMqB,KACjBJ,SAAUA,EACVK,OAAQlB,KAAKJ,MAAMsB,WAf/B,CAAAP,IAAA,eAAAC,MAAA,SAmByBM,GACjBlB,KAAKc,gBAAgB,CACjBC,GAAIf,KAAKJ,MAAMmB,GACfC,OAAQhB,KAAKJ,MAAMoB,OACnBC,KAAMjB,KAAKJ,MAAMqB,KACjBJ,SAAUb,KAAKJ,MAAMiB,SACrBK,OAAQA,MAzBpB,CAAAP,IAAA,eAAAC,MAAA,SA6ByBI,GACjBhB,KAAKc,gBAAgB,CACjBC,GAAIf,KAAKJ,MAAMmB,GACfC,OAAQA,EACRC,KAAMjB,KAAKJ,MAAMqB,KACjBJ,SAAUb,KAAKJ,MAAMiB,SACrBK,OAAQlB,KAAKJ,MAAMsB,WAnC/B,CAAAP,IAAA,kBAAAC,MAAA,SAuC4BO,GACpBnB,KAAKJ,MAAMwB,SAASD,KAxC5B,CAAAR,IAAA,SAAAC,MAAA,WA2Ca,IAAAS,EAAArB,KACCgB,EAASM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,YACAH,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASd,MAAOZ,KAAKJ,MAAMiB,SAAUO,SAAU,SAAAO,GAAC,OAAGN,EAAKd,eAAeoB,EAAEf,QAAQgB,aAAa,EAAMC,iBAAkB,IAAKC,kBAAmB,IAAKC,KAAM,GAAIC,IAAK,MAEtKV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,UACAH,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASd,MAAOZ,KAAKJ,MAAMsB,OAAQE,SAAU,SAAAO,GAAC,OAAGN,EAAKb,aAAamB,EAAEf,QAAQgB,aAAa,EAAMC,iBAAkB,IAAKC,kBAAmB,IAAKC,KAAM,GAAIC,IAAK,OAItK,OACIV,EAAAC,EAAAC,cAACS,EAAA,MAAD,CAAOC,OAAQlC,KAAKJ,MAAMqB,KAAMQ,UAAU,aACtCH,EAAAC,EAAAC,cAACW,EAAA,OAAD,CAAQV,UAAU,gBAAgBW,MAAM,IAAIC,QAAS,SAAAV,GAAC,OAAGN,EAAKzB,MAAM0C,SAASjB,EAAKzB,MAAMmB,OACxFO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,UACAH,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUd,UAAU,aAAaL,SAAU,SAAAO,GAAC,OAAGN,EAAKjB,aAAauB,EAAEa,UAAUA,QAASxC,KAAKJ,MAAMoB,UAEpGhB,KAAKJ,MAAMoB,QACRA,OA/DpBtB,EAAA,CAA+B+C,IAAMC,oBCpBxBC,EAAb,oBAAAA,IAAA7C,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,GAAA,OAAA7C,OAAAY,EAAA,EAAAZ,CAAA6C,EAAA,OAAAhC,IAAA,OAAAC,MAAA,WAEQ,OAAO+B,EAAKC,cAAc,EAAG,OAFrC,CAAAjC,IAAA,MAAAC,MAAA,WAMQ,OAAO+B,EAAKC,cAAc,EAAG,MANrC,CAAAjC,IAAA,MAAAC,MAAA,WAUQ,OAAO+B,EAAKC,cAAc,EAAG,MAVrC,CAAAjC,IAAA,MAAAC,MAAA,WAcQ,OAAO+B,EAAKC,cAAc,EAAG,MAdrC,CAAAjC,IAAA,KAAAC,MAAA,WAkBQ,OAAO+B,EAAKC,cAAc,EAAG,KAlBrC,CAAAjC,IAAA,KAAAC,MAAA,WAsBQ,OAAO+B,EAAKC,cAAc,EAAG,KAtBrC,CAAAjC,IAAA,KAAAC,MAAA,WA0BQ,OAAO+B,EAAKC,cAAc,EAAG,KA1BrC,CAAAjC,IAAA,KAAAC,MAAA,WA8BQ,OAAO+B,EAAKC,cAAc,EAAG,KA9BrC,CAAAjC,IAAA,gBAAAC,MAAA,SAiCiCmB,EAAaC,GACtC,OAAOa,KAAKC,MAAMD,KAAKE,UAAYf,EAAMD,EAAM,IAAMA,MAlC7DY,EAAA,oCCKaK,EAAb,WACI,SAAAA,IAAsBlD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,GAD1B,OAAAlD,OAAAY,EAAA,EAAAZ,CAAAkD,EAAA,OAAArC,IAAA,YAAAC,MAAA,SAG+BD,EAAasC,GACpC,IAAIC,EAAaC,KAAKC,UAAUH,GAEhCI,MARO,aAQc1C,EAAKuC,EAAY,CAACI,QAAS,OANxD,CAAA3C,IAAA,oBAAAC,MAAA,SASoCqC,GAC5BjD,KAAKuD,UAAU,iBAAkBN,KAVzC,CAAAtC,IAAA,mBAAAC,MAAA,WAcQ,OAAOZ,KAAKwD,SAAS,oBAd7B,CAAA7C,IAAA,WAAAC,MAAA,SAiB8BD,GACtB,IAAIuC,EAAaG,MApBV,aAoB+B1C,GAEtC,GAAIuC,EAKJ,OADaC,KAAKM,MAAMP,OAxBhCF,EAAA,GCcaU,EAAb,SAAA/D,GACI,SAAA+D,EAAY9D,GAAY,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,GACpB7D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,IAEN,IAAI+D,EAAWX,EAAaY,mBAHR,OAKlB/D,EAAKoD,MADJU,EACY,CACXE,SAAUF,EAASE,SACnBC,WAAYH,EAASG,WACrBC,iBAAkBJ,EAASI,iBAC3BC,YAAaL,EAASK,YACtBC,WAAYN,EAASM,WACrBC,aAAcP,EAASO,cAGZ,CACXL,SAAU,GACVC,WAAY,GACZC,iBAAkB,GAClBC,YAAa,EACbC,WAAY,EACZC,aAAc,GAIlBrE,EAAKsE,aAAetE,EAAKsE,aAAa9D,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKuE,oBAAsBvE,EAAKuE,oBAAoB/D,KAAzBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC3BA,EAAKiB,gBAAkBjB,EAAKiB,gBAAgBT,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IACvBA,EAAKwE,mBAAqBxE,EAAKwE,mBAAmBhE,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC1BA,EAAKyE,YAAczE,EAAKyE,YAAYjE,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAK0E,gBAAkB1E,EAAK0E,gBAAgBlE,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IA7BHA,EAD5B,OAAAC,OAAAW,EAAA,EAAAX,CAAA4D,EAAA/D,GAAAG,OAAAY,EAAA,EAAAZ,CAAA4D,EAAA,EAAA/C,IAAA,eAAAC,MAAA,WAiC6B,IAIjBK,EAJiBI,EAAArB,KACjBwE,EAAUxE,KAAKiD,MAAMa,WACrBW,EAAQzE,KAAKiD,MAAMa,WAAWY,OAIhCzD,EADCjB,KAAKiD,MAAMc,iBACL/D,KAAKiD,MAAMc,iBAEX,OAASU,EAGlBD,EAAQG,KAAK,CACX5D,GAAI6D,MACJ3D,KAAMA,EACNJ,SAAU,EACVK,OAAQ,EACRF,QAAQ,IAGVhB,KAAK6E,SAAS,CACZf,WAAYU,EACZT,iBAAkB,IACjB,WACDf,EAAa8B,kBAAkBzD,EAAK4B,WAxD9C,CAAAtC,IAAA,sBAAAC,MAAA,SA4DkCmE,GAA0C,IAAAC,EAAAhF,KAChEiF,EAASF,EAAME,OAEnBjF,KAAK6E,SAAS,CACZd,iBAAkBkB,EAAOrE,OACxB,WACDoC,EAAa8B,kBAAkBE,EAAK/B,WAlE9C,CAAAtC,IAAA,kBAAAC,MAAA,SAsE8BO,GAA0B,IAAA+D,EAAAlF,KAC5CmF,EAAQnF,KAAKiD,MAAMa,WAAWsB,KAAK,SAAAC,GAAM,OAAOA,EAAEtE,KAAOI,EAAUJ,KAEvE,GAAIoE,EAAJ,CAIA,IAAIG,EAAQtF,KAAKiD,MAAMa,WAAWyB,QAAQJ,GACtCK,EAAYxF,KAAKiD,MAAMa,WAC3B0B,EAAUF,GAASnE,EACnBnB,KAAK6E,SAAS,CACZf,WAAY0B,GACX,WACDxC,EAAa8B,kBAAkBI,EAAKjC,YAnF9C,CAAAtC,IAAA,kBAAAC,MAAA,SAuF8BG,GAAkB,IAAA0E,EAAAzF,KACpCmF,EAAQnF,KAAKiD,MAAMa,WAAWsB,KAAK,SAAAC,GAAM,OAAOA,EAAEtE,KAAOA,IAC7D,GAAIoE,EAAJ,CAGA,IAAIG,EAAQtF,KAAKiD,MAAMa,WAAWyB,QAAQJ,GAEtCK,EAAYxF,KAAKiD,MAAMa,WAC3B0B,EAAUE,OAAOJ,EAAO,GACxBtF,KAAK6E,SAAS,CACVf,WAAY0B,GACb,WACDxC,EAAa8B,kBAAkBW,EAAKxC,YAnG9C,CAAAtC,IAAA,qBAAAC,MAAA,SAuGiCmE,GAAyC,IAAAY,EAAA3F,KAC9DiF,EAASF,EAAME,OAEnBjF,KAAK6E,SAAS,CACVX,cAAee,EAAOrE,MACtBoD,aAAciB,EAAOrE,MACrBqD,WAAY,GACb,WACDjB,EAAa8B,kBAAkBa,EAAK1C,WA/G9C,CAAAtC,IAAA,cAAAC,MAAA,WAmH2B,IAAAgF,EAAA5F,KACf6F,EAAkB7F,KAAKiD,MAAMa,WAAWY,OAExCoB,EAAc9F,KAAKiD,MAAMa,WAAWiC,IAAI,SAAAV,GACxC,IAAgB,IAAbA,EAAErE,OACD,OAAO,EAGX,IAAIgF,EAAU,EAId,OAHGJ,EAAK3C,MAAMY,SAAYlB,EAAKsD,MAAQZ,EAAExE,WACrCmF,EAAUrD,EAAKuD,KAAOb,EAAEnE,QAErB8E,IACRG,OAAQ,SAAC5E,EAAG6E,GAAJ,OAAU7E,EAAI6E,IAEzBpG,KAAK6E,SAAU,SAAA5B,GAAK,MAAK,CACrBe,YAAaf,EAAMe,YAAc6B,EAAkBC,EACnD7B,WAAYhB,EAAMgB,WAAa,IAC/B,WACFjB,EAAa8B,kBAAkBc,EAAK3C,WAtI9C,CAAAtC,IAAA,SAAAC,MAAA,WA0Ie,IAAAyF,EAAArG,KACHsG,EAA+B,GAD5BC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGP,QAAAC,EAAAC,EAAqB5G,KAAKiD,MAAMa,WAAhC+C,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA2C,KAAnCpF,EAAmCwF,EAAA/F,MACzC0F,EAAc3B,KAAKrD,EAAAC,EAAAC,cAACyF,EAAD,CAAWtG,IAAKQ,EAAUJ,GAAIK,SAAUpB,KAAKc,gBAAiBG,KAAME,EAAUF,KAAMC,OAAQC,EAAUD,OAAQL,SAAUM,EAAUN,SAAUG,OAAQG,EAAUH,OAAQD,GAAII,EAAUJ,GAAIuB,SAAUtC,KAAKuE,oBAJrN,MAAA2C,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,GAOP,IAAIW,EAAmBd,EAAc5B,OAAS,EAE9C,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,aACAH,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASE,aAAa,EAAMC,iBAAkB,IAAKC,kBAAmB,IAAKlB,MAAOZ,KAAKiD,MAAMY,SAAUzC,SAAU,SAAAO,GAAC,OAAG0E,EAAKxB,SAAS,CAAChB,SAAUlC,EAAEf,SAASmB,IAAK,EAAGC,IAAK,MAExKV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,iBACAH,EAAAC,EAAAC,cAAC6F,EAAA,UAAD,CAAWzG,MAAOZ,KAAKiD,MAAMiB,aAAcoD,UAAW,MAAOlG,SAAUpB,KAAKqE,sBAE9E/C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,gBAA4CzB,KAAKiD,MAAMgB,YACvD3C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,iBAA8CzB,KAAKiD,MAAMe,aACzD1C,EAAAC,EAAAC,cAACW,EAAA,OAAD,CAAQV,UAAU,cAAcW,MAAO,eAAgBC,QAASrC,KAAKsE,YAAaiD,SAAUH,KAE9F9F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZ6E,GAELhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,kBACAH,EAAAC,EAAAC,cAAC6F,EAAA,UAAD,CAAW5F,UAAU,QAAQb,MAAOZ,KAAKiD,MAAMc,iBAAkB3C,SAAUpB,KAAKoE,uBAElF9C,EAAAC,EAAAC,cAACW,EAAA,OAAD,CAAQV,UAAU,gBAAgBW,MAAM,qBAAqBC,QAASrC,KAAKmE,qBA1KzFT,EAAA,CAAoCjB,IAAMC,WCL3B8E,mLARX,OACElG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiG,EAAD,cAJUhF,IAAMC,WCQJgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECVNC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da1aedca.chunk.js","sourcesContent":["import React from 'react';\nimport { Panel } from 'primereact/panel';\nimport { Checkbox } from 'primereact/checkbox';\nimport { Spinner } from 'primereact/spinner';\nimport { Button } from 'primereact/button';\nimport \"./Character.scss\";\n\nexport interface CharacterProps extends CharacterModel {\n    onChange: (state: CharacterModel)=>void\n    onRemove: (id: string) => void\n}\n\nexport interface CharacterModel {\n    id: string;\n    name: string;\n    survival: number;\n    wisdom: number;\n    forage: boolean;\n}\n\nexport class Character extends React.Component<CharacterProps, {}> {\n    constructor(props: CharacterProps) {\n        super(props);\n\n        this.updateForage = this.updateForage.bind(this);\n        this.updateSurvival = this.updateSurvival.bind(this);\n        this.updateWisdom = this.updateWisdom.bind(this);\n    }\n\n    private updateSurvival(survival: number){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: this.props.forage,\n            name: this.props.name,\n            survival: survival,\n            wisdom: this.props.wisdom\n        });\n    }\n\n    private updateWisdom(wisdom: number){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: this.props.forage,\n            name: this.props.name,\n            survival: this.props.survival,\n            wisdom: wisdom\n        });\n    }\n\n    private updateForage(forage: boolean){\n        this.updateCharacter({\n            id: this.props.id,\n            forage: forage,\n            name: this.props.name,\n            survival: this.props.survival,\n            wisdom: this.props.wisdom\n        });\n    }\n\n    private updateCharacter(character: CharacterModel){\n        this.props.onChange(character);\n    }\n\n    render() {\n        const forage = <div className=\"forage-panel\">\n            <div className=\"survival\">\n                <div className=\"survival-label\">Survival</div>\n                <Spinner value={this.props.survival} onChange={e=> this.updateSurvival(e.value)} formatInput={true} decimalSeparator={','} thousandSeparator={' '} min={-30} max={30}/>\n            </div>\n            <div className=\"wisdom\">\n                <div className=\"wisdom-label\">Wisdom</div>\n                <Spinner value={this.props.wisdom} onChange={e=> this.updateWisdom(e.value)} formatInput={true} decimalSeparator={','} thousandSeparator={' '} min={-30} max={30}/>\n            </div>\n        </div>;\n\n        return (\n            <Panel header={this.props.name} className=\"character\">\n                <Button className=\"remove-button\" label=\"X\" onClick={e=> this.props.onRemove(this.props.id)}/>\n                <div className=\"forage\">\n                    <span className=\"forage-label\">Forage</span>\n                    <Checkbox className=\"forage-box\" onChange={e=> this.updateForage(e.checked)} checked={this.props.forage}/>\n                </div>\n                {this.props.forage &&\n                    forage\n                }           \n            </Panel>\n        );\n    }\n}\n","export class Dice {\n    static d100(): number {\n        return Dice.getRndInteger(1, 100);\n    }\n\n    static d20(): number {\n        return Dice.getRndInteger(1, 20);\n    }\n\n    static d12(): number {\n        return Dice.getRndInteger(1, 12);\n    }\n\n    static d10(): number {\n        return Dice.getRndInteger(1, 10);\n    }\n\n    static d8(): number {\n        return Dice.getRndInteger(1, 8);\n    }\n\n    static d6(): number {\n        return Dice.getRndInteger(1, 6);\n    }\n\n    static d4(): number {\n        return Dice.getRndInteger(1, 4);\n    }\n\n    static d2(): number {\n        return Dice.getRndInteger(1, 2);\n    }\n\n    private static getRndInteger(min: number, max: number) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n}\n","import * as Cookies from 'es-cookie';\nimport { SurvivalHelperState } from './../component/survivalHelper/SurvivalHelper';\n\nconst PREFIX = '5e-helper-';\n\nexport class StateHandler {\n    private constructor(){}\n\n    public static saveState<T>(key: string, state: T): void {\n        let jsonString = JSON.stringify(state);\n\n        Cookies.set(PREFIX + key, jsonString, {expires: 14});\n    }\n\n    public static saveSurvivalState(state: SurvivalHelperState): void {\n        this.saveState(\"survival-state\", state);\n    }\n\n    public static getSurvivalState(): SurvivalHelperState | undefined {\n        return this.getState(\"survival-state\");\n    }\n\n    public static getState<T>(key: string): T | undefined {\n        let jsonString = Cookies.get(PREFIX + key);\n\n        if(!jsonString){\n            return undefined;\n        }\n\n        let obj: T = JSON.parse(jsonString)\n        return obj;\n    }\n}\n","import React from 'react';\nimport { CharacterModel, Character } from '../character/Character';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { Spinner } from 'primereact/spinner';\nimport { Dice } from '../../util/Dice';\nimport './SurvivalHelper.scss';\nimport uuidv1 from 'uuid/v1';\nimport { StateHandler } from '../../util/StateHandler';\n\nexport interface SurvivalHelperState {\n    characters: CharacterModel[];\n    newCharacterName: string;\n    forageDC: number;\n    startingFood: number;\n    currentFood: number;\n    daysPassed: number;\n}\n\nexport class SurvivalHelper extends React.Component<{}, SurvivalHelperState> {\n    constructor(props: any) {\n        super(props);\n    \n        let oldState = StateHandler.getSurvivalState();\n        if(oldState) {\n          this.state = {\n            forageDC: oldState.forageDC,\n            characters: oldState.characters,\n            newCharacterName: oldState.newCharacterName,\n            currentFood: oldState.currentFood,\n            daysPassed: oldState.daysPassed,\n            startingFood: oldState.startingFood\n          }\n        } else {\n          this.state = {\n            forageDC: 10,\n            characters: [],\n            newCharacterName: \"\",\n            currentFood: 0,\n            daysPassed: 0,\n            startingFood: 0\n          }\n        }\n\n        this.addCharacter = this.addCharacter.bind(this);\n        this.updateCharacterName = this.updateCharacterName.bind(this);\n        this.updateCharacter = this.updateCharacter.bind(this);\n        this.updateStartingFood = this.updateStartingFood.bind(this);\n        this.andvanceDay = this.andvanceDay.bind(this);\n        this.removeCharacter = this.removeCharacter.bind(this);\n      }\n    \n      private addCharacter() {\n        let updated = this.state.characters;\n        let count = this.state.characters.length;\n    \n        let name;\n        if(this.state.newCharacterName) {\n          name = this.state.newCharacterName;\n        }else {\n          name = \"NPC \" + count;\n        }\n    \n        updated.push({\n          id: uuidv1(),\n          name: name,\n          survival: 0,\n          wisdom: 0,\n          forage: true\n        });\n    \n        this.setState({\n          characters: updated,\n          newCharacterName: \"\"\n        }, () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n    \n      private updateCharacterName(event: React.FormEvent<HTMLInputElement>) {\n        let target = event.target as HTMLInputElement;\n        \n        this.setState({\n          newCharacterName: target.value\n        }, () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n    \n      private updateCharacter(character: CharacterModel){\n        let found = this.state.characters.find(c => {return c.id === character.id});\n    \n        if(!found){\n          return;\n        }\n    \n        let index = this.state.characters.indexOf(found);\n        let forUpdate = this.state.characters;\n        forUpdate[index] = character;\n        this.setState({\n          characters: forUpdate\n        }, () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n\n      private removeCharacter(id: string): void {\n        let found = this.state.characters.find(c => {return c.id === id});\n        if(!found){\n          return;\n        }\n        let index = this.state.characters.indexOf(found);\n\n        let forUpdate = this.state.characters;\n        forUpdate.splice(index, 1);\n        this.setState({\n            characters: forUpdate\n        }, () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n    \n      private updateStartingFood(event: React.FormEvent<HTMLInputElement>){\n        let target = event.target as HTMLInputElement;\n        \n        this.setState({\n            startingFood: +target.value,\n            currentFood: +target.value,\n            daysPassed: 0\n        }, () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n\n      private andvanceDay(){\n        let foodConsumption = this.state.characters.length;\n\n        let foragedFood = this.state.characters.map(c=> {\n            if(c.forage === false){\n                return 0;\n            }\n\n            let foraged = 0;\n            if(this.state.forageDC < (Dice.d20() + c.survival)){\n                foraged = Dice.d6() + c.wisdom;\n            }\n            return foraged;\n        }).reduce( (a, b) => a + b );\n\n        this.setState( state => ({\n            currentFood: state.currentFood - foodConsumption + foragedFood,\n            daysPassed: state.daysPassed + 1\n        }), () => {\n          StateHandler.saveSurvivalState(this.state)\n        });\n      }\n\n      render() {\n        let jsxCharacters: JSX.Element[] = [];\n    \n        for(let character of this.state.characters){\n          jsxCharacters.push(<Character key={character.id} onChange={this.updateCharacter} name={character.name} wisdom={character.wisdom} survival={character.survival} forage={character.forage} id={character.id} onRemove={this.removeCharacter}/>);\n        }\n\n        let advanceAvailable = jsxCharacters.length < 1;\n    \n        return (\n          <div className=\"survival-helper\">\n              <div className=\"header\">\n                <div className=\"forage\">\n                  <span className=\"label\">Forage DC</span>\n                  <Spinner formatInput={true} decimalSeparator={\",\"} thousandSeparator={\" \"} value={this.state.forageDC} onChange={e=> this.setState({forageDC: e.value})} min={8} max={30}/>\n                </div>\n                <div className=\"starting-food\">\n                  <span className=\"label\">Starting Food</span>\n                  <InputText value={this.state.startingFood} keyfilter={'int'} onChange={this.updateStartingFood}/>\n                </div>\n                <span className=\"days-passed\">Days Passed: {this.state.daysPassed}</span>\n                <span className=\"current-food\">Current Food: {this.state.currentFood}</span>\n                <Button className=\"advance-day\" label={\"Advance Day!\"} onClick={this.andvanceDay} disabled={advanceAvailable}/>\n              </div>\n              <div className=\"character-container\">\n                {jsxCharacters}\n              </div>\n            <div className=\"footer\">\n              <div className=\"character-name\">\n                <span className=\"label\">Character name</span>\n                <InputText className=\"input\" value={this.state.newCharacterName} onChange={this.updateCharacterName} />\n              </div>\n              <Button className=\"new-character\" label=\"Add new Character!\" onClick={this.addCharacter}/>\n            </div>\n          </div>\n        );\n      }\n}","import React from 'react';\nimport { SurvivalHelper } from './component/survivalHelper/SurvivalHelper';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SurvivalHelper/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}